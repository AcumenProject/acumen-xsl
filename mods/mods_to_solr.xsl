<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2011, The University of Alabama.
    
    Licensed under the Educational Community License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy of the License at
    http://www.osedu.org/licenses/ECL-2.0
    
    Unless required by applicable law or agreed to in writing, software distributed
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied. See the License for the specific language governing
    permissions and limitations under the License.
-->
<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:mods="http://www.loc.gov/mods/v3"
        xmlns:etd="http://www.ndltd.org/standards/metadata/etdms/1.0/"
        xmlns:facet="http://libcontent.lib.ua.edu/digital/schemas/facets.xsd">

    <xsl:output
            method="xml"
            encoding="utf-8"
            indent="no"
    />
    <xsl:strip-space elements="*"/>

    <xsl:template match="*|node()">
        <xsl:value-of select="text()"/>
        <xsl:text>&#32;</xsl:text>
        <xsl:apply-templates/>
    </xsl:template>

    <xsl:template match="/">
        <add>
            <doc>
                <xsl:for-each select=".//mods:mods/mods:titleInfo[not(@*)]">
                    <field name="title">
                        <xsl:call-template name="mods-titletext" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:mods/mods:titleInfo[@displayLabel='title']">
                    <field name="title">
                        <xsl:call-template name="mods-titletext" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:mods/mods:titleInfo[@type='alternative']">
                    <field name="alt_title">
                        <xsl:call-template name="mods-titletext" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:mods/mods:titleInfo[@type='uniform']">
                    <field name="uniform_title">
                        <xsl:call-template name="mods-titletext" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:mods/mods:titleInfo[@type='translated']">
                    <field name="translated_title">
                        <xsl:call-template name="mods-titletext" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:mods/mods:name">
                    <xsl:if test="mods:role/mods:roleTerm[@type='text' and text() != 'Distributor']">
                        <field name="name">
                            <xsl:value-of select="mods:namePart/text()" />
                        </field>
                        <field name="role">
                            <xsl:value-of select="mods:role/mods:roleTerm[@type='text']/text()" />
                        </field>
                    </xsl:if>
                </xsl:for-each>

                <xsl:for-each select=".//mods:note[@displayLabel='Description']">
                    <xsl:call-template name="description"/>
                </xsl:for-each>

                <xsl:for-each select=".//mods:abstract">
                    <xsl:call-template name="description"/>
                </xsl:for-each>

                <xsl:for-each select=".//mods:genre">
                    <field name="genre">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <!-- Research Only -->
                <xsl:if test="substring(.//mods:identifier[@name='local'],2,4) = '0015'">
                    <xsl:for-each select=".//mods:extension/etd:discipline">
                        <field name="discipline">
                            <xsl:value-of select="text()" />
                        </field>
                    </xsl:for-each>
                </xsl:if>

                <xsl:for-each select=".//mods:mods/mods:identifier[@type='uri']">
                    <field name="_purl">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <!-- Preliminary Metadata -->
                <xsl:for-each select=".//mods:recordInfo/mods:recordOrigin">
                    <xsl:if test="text()='Preliminary metadata generated by script'">
                        <field name="_oai_no_export">Preliminary</field>
                    </xsl:if>
                </xsl:for-each>

                <!-- ASERL and similarly set up virtual collections -->
                <xsl:for-each select=".//mods:relatedItem[@displayLabel='Virtual Collection']/mods:location/mods:url">
                    <field name="_virtual_collection">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:subject">
                    <field name="subject">
                        <xsl:apply-templates />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:*[@keyDate='yes']">
                    <field name="display_date">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:dateIssued">
                    <field name="date">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:dateCreated">
                    <field name="date">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:dateOther">
                    <field name="date">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:extension/facet:date_f">
                    <xsl:variable name="point">
                        <xsl:choose>
                            <xsl:when test="@point">_<xsl:value-of select="@point"></xsl:value-of></xsl:when>
                            <xsl:otherwise></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>

                    <field name="date{$point}_tsf">
                        <xsl:value-of select="text()" />
                    </field>

                    <xsl:if test="@circa">
                        <field name="date{$point}_circa">
                            <xsl:value-of select="@circa" />
                        </field>
                    </xsl:if>

                    <xsl:if test="@no">
                        <field name="date{$point}_no">
                            <xsl:value-of select="@no" />
                        </field>
                    </xsl:if>
                </xsl:for-each>

                <xsl:for-each select=".//mods:typeOfResource">
                    <field name="type">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:location/mods:physicalLocation">
                    <xsl:choose>
                        <xsl:when test="@type='collection' and @displayLabel = 'Repository Collection'">
                            <field name="collection">
                                <xsl:value-of select="text()" />
                            </field>
                        </xsl:when>
                        <xsl:when test="@type='collectionNumber'">
                            <field name="collection_number">
                                <xsl:value-of select="text()" />
                            </field>
                        </xsl:when>
                        <xsl:when test="@type='boxNumber' or @type='box number' or @type='Box Number' or @type='Box'">
                            <field name="box_number">
                                <xsl:value-of select="text()" />
                            </field>
                        </xsl:when>
                        <xsl:when test="@type='folderNumber' or @type='folder number' or @type='Folder Number' or @type='Folder'">
                            <field name="folder_number">
                                <xsl:value-of select="text()" />
                            </field>
                        </xsl:when>
                        <xsl:otherwise>
                            <field name="location">
                                <xsl:value-of select="text()" />
                            </field>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>

                <xsl:for-each select=".//mods:physicalDescription/mods:extent">
                    <field name="extent">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:originInfo/mods:place/mods:placeTerm[@type='text']">
                    <field name="origin_place">
                        <xsl:value-of select="text()" />
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:language/mods:languageTerm">
                    <xsl:if test="@type = 'code'">
                        <field name="language_code">
                            <xsl:value-of select="text()"/>
                        </field>
                    </xsl:if>
                    <xsl:if test="@type = 'text'">
                        <field name="language">
                            <xsl:value-of select="text()"/>
                        </field>
                    </xsl:if>
                </xsl:for-each>

                <xsl:for-each select=".//mods:tableOfContents">
                    <field name="table_of_contents">
                        <xsl:value-of select="text()"/>
                    </field>
                </xsl:for-each>

                <xsl:for-each select=".//mods:hierarchicalGeographic">
                    <xsl:for-each select="./*">
                        <field name="geographic_f">
                            <xsl:value-of select="position()-1"/>
                            <xsl:text>/</xsl:text>
                            <xsl:for-each select="preceding-sibling::*">
                                <xsl:value-of select="text()"></xsl:value-of>
                                <xsl:text>/</xsl:text>
                            </xsl:for-each>
                            <xsl:value-of select="text()"/>
                        </field>
                    </xsl:for-each>
                </xsl:for-each>

                <xsl:for-each select=".//facet:*[not(local-name() = 'updated_f') and not(local-name() = 'date_f')]">
                    <xsl:variable name="facetName" select="name()" />
                    <field>
                        <xsl:attribute name="name">
                            <xsl:value-of select="local-name()"/>
                        </xsl:attribute>
                        <xsl:value-of select="count(ancestor::*[name()=$facetName])"></xsl:value-of>
                        <xsl:text>/</xsl:text>
                        <xsl:for-each select="ancestor::*[name()=$facetName]">
                            <xsl:value-of select="@type"></xsl:value-of>
                            <xsl:text>/</xsl:text>
                        </xsl:for-each>
                        <xsl:value-of select="@type"></xsl:value-of>
                    </field>
                </xsl:for-each>

                <content>
                    <xsl:apply-templates/>
                </content>

            </doc>
        </add>
    </xsl:template>

    <!-- This templates processes titleInfo parts. -->
    <xsl:template name="mods-titletext">
        <xsl:value-of select="mods:nonSort/text()"/>
        <xsl:text> </xsl:text>
        <xsl:value-of select="mods:title/text()"/>

        <xsl:if test="mods:subTitle|mods:partName|mods:partNumber">
            <xsl:if test="mods:subTitle">
                <xsl:text>: </xsl:text>
                <xsl:value-of select="mods:subTitle/text()"/>
            </xsl:if>
            <xsl:if test="mods:partName|mods:partNumber">
                <xsl:if test="mods:title|mods:subTitle">
                    <xsl:text>, </xsl:text>
                </xsl:if>
                <xsl:for-each select="mods:partName|mods:partNumber">
                    <xsl:if test="position()>1">
                        <xsl:text>, </xsl:text>
                    </xsl:if>
                    <xsl:apply-templates/>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="following-sibling::mods:part and not(@*)">
            <xsl:if test="mods:title|mods:subTitle">
                <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:for-each select="following-sibling::mods:part/child::*">
                <xsl:if test="position()>1">
                    <xsl:text>, </xsl:text>
                </xsl:if>
                <xsl:call-template name="mods-part-detail" />
            </xsl:for-each>
        </xsl:if>
    </xsl:template>

    <!-- The following template places appropriate abbreviations for different partNumber and partName elements -->
    <xsl:template name="mods-part-detail">
        <xsl:choose>
            <xsl:when test="@type">
                <xsl:if test="@type='volume'">
                    <xsl:text>vol. </xsl:text>
                </xsl:if>
                <xsl:if test="@type='issue'">
                    <xsl:text>no. </xsl:text>
                </xsl:if>
                <xsl:if test="@type='issueTitle'">
                    <xsl:text>iss. </xsl:text>
                </xsl:if>
                <xsl:value-of select="child::*/text()"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="description">
        <field name="description">
            <xsl:value-of select="text()" />
        </field>
    </xsl:template>
</xsl:stylesheet>